CREATE DATABASE LOCADORA;
GO
USE LOCADORA;
GO

CREATE TABLE LOC_VEICULO(
VEI_IN_CODIGO INT NOT NULL IDENTITY CONSTRAINT VEI_PK_VEICULO PRIMARY KEY,
VEI_CH_PLACA CHAR(7) NOT NULL CONSTRAINT LOC_UK_VEI_PLACA UNIQUE
    CONSTRAINT LOC_CK_VEI_PLACA CHECK(VEI_CH_PLACA LIKE '[A-Z][A-Z][A-Z][A-Z0-9][0-9][0-9][0-9]'),
VEI_ST_NOME VARCHAR(50) NOT NULL,
VEI_ST_DESCRICAO VARCHAR(200) NOT NULL,
VEI_DT_FABRICACAO DATE NULL,
)
/*
*
* PROCEDURE PARA INSERIR UM NOVO VEÍCULO
*
*/
CREATE OR ALTER PROCEDURE SP_I_LOC_VEICULO
@PLACA CHAR(7),
@NOME VARCHAR(50), 
@DESCRICAO VARCHAR(200),
@FABRICACAO DATE,
@CODIGOGERADO INT=0 OUT --PARÂMETRO DE SAÍDA
AS
SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS
DECLARE @NR_PLACA INT 
--EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL
SELECT @NR_PLACA = COUNT(VEI_CH_PLACA)
FROM LOC_VEICULO
WHERE VEI_CH_PLACA = @PLACA
--COMPARANDO SE O TOTAL É MAIOR QUE ZERO (OU SEJA, JÁ EXISTE NO BD)
IF @NR_PLACA > 0
BEGIN
  RAISERROR('A placa informada já existe em outro veículo!',15,1)
  RETURN
END
--VERIFICANDO O FORMATO DA PLACA
IF (@PLACA NOT LIKE '[A-Z][A-Z][A-Z][A-Z0-9][0-9][0-9][0-9]')
BEGIN
   RAISERROR('A placa informada não corresponde ao padrão AAA9999',15,1)
   RETURN
END

--COMPARANDO SE O TAMANHO DA STRING (APÓS REMOVER OS ESPAÇOS EM BRANCO) É MAIOR QUE 0
IF LEN(TRIM(@NOME))=0 OR LEN(TRIM(@DESCRICAO))= 0
BEGIN
   RAISERROR('O nome e a descrição do veículo são obrigatórios!',15,1)
   RETURN
END

INSERT INTO LOC_VEICULO
(VEI_CH_PLACA, VEI_ST_NOME, VEI_ST_DESCRICAO, VEI_DT_FABRICACAO) VALUES 
(@PLACA, @NOME, UPPER(@DESCRICAO), @FABRICACAO)
SET @CODIGOGERADO = SCOPE_IDENTITY() /* RETORNA O VALOR DO IDENTITY ATUAL */
RETURN @CODIGOGERADO
GO
/* FIM DA STORED PROCEDURE DE INCLUSÃO */

EXEC SP_I_LOC_VEICULO 'ABC1530','AUDI A54 PRATA','Veículo completo, com apenas 23000KM',
'2019-04-01'

/*
*
* PROCEDURE PARA ALTERAR UM VEÍCULO JÁ EXISTENTE
*
*/
CREATE OR ALTER PROCEDURE SP_U_LOC_VEICULO(
@CODIGO INT,
@PLACA CHAR(7),
@NOME VARCHAR(50), 
@DESCRICAO VARCHAR(200),
@FABRICACAO DATE)
AS
SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS
DECLARE @NR_PLACA INT 
--EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL
SELECT @NR_PLACA = COUNT(VEI_CH_PLACA)
FROM LOC_VEICULO
WHERE VEI_CH_PLACA = @PLACA 
--COMPARANDO SE O TOTAL É IGUAL A ZERO (OU SEJA, SE A PLACA EXISTE NO BD)
IF @NR_PLACA = 0
BEGIN
  RAISERROR('Não é possível efetuar a alteração: A placa informada não existe!',15,1)
  RETURN
END
--VERIFICANDO O FORMATO DA PLACA
IF (@PLACA NOT LIKE '[A-Z][A-Z][A-Z][A-Z0-9][0-9][0-9][0-9]')
BEGIN
   RAISERROR('A placa informada não corresponde ao padrão AAA9999',15,1)
   RETURN
END
--COMPARANDO SE O TAMANHO DA STRING (APÓS REMOVER OS ESPAÇOS EM BRANCO) É MAIOR QUE 0
IF LEN(TRIM(@NOME))=0 OR LEN(TRIM(@DESCRICAO))= 0
BEGIN
   RAISERROR('O nome e a descrição do veículo são obrigatórios!',15,1)
   RETURN
END

UPDATE LOC_VEICULO
SET VEI_CH_PLACA = @PLACA, 
    VEI_ST_NOME = @NOME, 
	VEI_ST_DESCRICAO = UPPER(@DESCRICAO), 
	VEI_DT_FABRICACAO = @FABRICACAO 
WHERE
    VEI_CH_PLACA = @PLACA
RETURN 
GO
/* FIM DA STORED PROCEDURE DE ALTERAÇÃO */

EXEC SP_U_LOC_VEICULO 1,'ABC1539','AUDI A5 AZUL','ARRANHADO NA PORTA DO MOTORISTA',
'2019-04-01'

/*
*
* PROCEDURE PARA EXCLUIR UM VEÍCULO PELA PLACA
*
*/

CREATE OR ALTER PROCEDURE SP_D_LOC_VEICULO(
@PLACA CHAR(7))
AS
SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS
DECLARE @NR_PLACA INT 
--EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL
SELECT @NR_PLACA = COUNT(VEI_CH_PLACA)
FROM loc_VEICULO
WHERE VEI_CH_PLACA = @PLACA
--COMPARANDO SE O TOTAL É IGUAL A ZERO (OU SEJA, SE A PLACA EXISTE NO BD)
IF @NR_PLACA = 0
BEGIN
  RAISERROR('Não é possível efetuar a exclusão: A placa informada não existe!',15,1)
  RETURN
END

DELETE 
FROM 
	LOC_VEICULO
WHERE
    VEI_CH_PLACA = @PLACA
RETURN 
GO

EXEC SP_D_LOC_VEICULO 'ABC1239'


/*
*
* PROCEDURE PARA LISTAR OS VEÍCULOS
*
*/

CREATE OR ALTER PROCEDURE SP_S_LOC_VEICULO
( @FILTRO VARCHAR(100)='')
AS
IF (LEN(@FILTRO)=0)
BEGIN
SELECT
	VEI_IN_CODIGO AS 'Código',
	VEI_CH_PLACA AS 'Placa',
	VEI_ST_NOME AS 'Nome',
	VEI_ST_DESCRICAO AS 'Descrição',
	CONVERT(CHAR(10),VEI_DT_FABRICACAO,103) AS 'Fabricação'
FROM
	LOC_VEICULO
ORDER BY
	VEI_CH_PLACA
RETURN
END
ELSE
BEGIN
SELECT
	VEI_IN_CODIGO AS 'Código',
	VEI_CH_PLACA AS 'Placa',
	VEI_ST_NOME AS 'Nome',
	VEI_ST_DESCRICAO AS 'Descrição',
	CONVERT(CHAR(10),VEI_DT_FABRICACAO,103) AS 'Fabricação'
FROM
	LOC_VEICULO
WHERE
	VEI_CH_PLACA LIKE '%'+@FILTRO+'%' OR
	VEI_ST_NOME LIKE '%'+@FILTRO+'%' OR
	VEI_ST_DESCRICAO LIKE '%'+@FILTRO+'%'
ORDER BY
	VEI_CH_PLACA
END
GO
/* FIM DA STORED PROCEDURE DE LISTAGEM */


EXEC SP_S_LOC_VEICULO ''

/*DROP TABLE LOC_CLIENTE*/
CREATE TABLE LOC_CLIENTE(
CLI_IN_CODIGO INT NOT NULL IDENTITY CONSTRAINT CLI_PK_VEICULO PRIMARY KEY,
CLI_ST_NOME VARCHAR(100) NOT NULL,
CLI_CH_CPF CHAR(14) NOT NULL CONSTRAINT LOC_UK_CLI_CPF UNIQUE
    CONSTRAINT EST_CK_CLI_CPF CHECK(CLI_CH_CPF LIKE '[0-9][0-9][0-9][.][0-9][0-9][0-9][.][0-9][0-9][0-9][-][0-9][0-9]'),
CLI_IN_CODIGO_VEICULO INT NULL 
	CONSTRAINT FK_CODIGO_VEICULO FOREIGN KEY REFERENCES LOC_VEICULO(VEI_IN_CODIGO),
CLI_DT_INCLUSAO DATE NOT NULL DEFAULT GETDATE(),
CLI_DT_LOCACAO DATE NULL,
CLI_DT_DEVOLUCAO DATE NULL
)

/*
*
* PROCEDURE PARA INSERIR UM NOVO CLIENTE
*
*/
CREATE OR ALTER PROCEDURE SP_I_LOC_CLIENTE(
@CPF CHAR(14),
@NOME VARCHAR(100), 
@CODIGOVEICULO INT,
@LOCACAO DATE,
@DEVOLUCAO DATE,
@CODIGOGERADO INT=0 OUT) --PARÂMETRO DE SAÍDA)
AS
SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS
DECLARE @NR_CPF INT 
--EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL
SELECT @NR_CPF = COUNT(CLI_CH_CPF)
FROM LOC_CLIENTE
WHERE CLI_CH_CPF = @CPF
--COMPARANDO SE O TOTAL É MAIOR QUE ZERO (OU SEJA, JÁ EXISTE NO BD)
IF @NR_CPF > 0
BEGIN
  RAISERROR('A CPF informada já existe em outro cliente!',15,1)
  RETURN
END
--VERIFICANDO O FORMATO DA CPF
IF (@CPF NOT LIKE '[0-9][0-9][0-9][.][0-9][0-9][0-9][.][0-9][0-9][0-9][-][0-9][0-9]')
BEGIN
   RAISERROR('A CPF informada não corresponde ao padrão 999.999.999-99',15,1)
   RETURN
END

--COMPARANDO SE O TAMANHO DA STRING (APÓS REMOVER OS ESPAÇOS EM BRANCO) É MAIOR QUE 0
IF LEN(TRIM(@NOME))=0
BEGIN
   RAISERROR('O nome do cliente são obrigatórios!',15,1)
   RETURN
END

IF @CODIGOVEICULO IS NOT NULL AND @LOCACAO IS NULL AND @DEVOLUCAO IS NULL
BEGIN
	RAISERROR('Se o cliente for vinculado a um carro a data de locação e data de devolução são obrigatória!',15,1)
	RETURN
END

INSERT INTO LOC_CLIENTE
(CLI_CH_CPF, CLI_ST_NOME, CLI_IN_CODIGO_VEICULO, CLI_DT_LOCACAO, CLI_DT_DEVOLUCAO) VALUES 
(@CPF, @NOME, @CODIGOVEICULO, @LOCACAO, @DEVOLUCAO)
SET @CODIGOGERADO = SCOPE_IDENTITY() /* RETORNA O VALOR DO IDENTITY ATUAL */
RETURN @CODIGOGERADO
GO
/* FIM DA STORED PROCEDURE DE INCLUSÃO */

EXEC SP_I_LOC_CLIENTE '999.278.999-99','Renan L', 2, '2023-01-12', '2023-01-16';

/*
*
* PROCEDURE PARA ALTERAR UM CLIENTE JÁ EXISTENTE
*
*/
CREATE OR ALTER PROCEDURE SP_U_LOC_CLIENTE(
@CPF CHAR(14),
@NOME VARCHAR(100), 
@CODIGOVEICULO INT,
@LOCACAO DATE,
@DEVOLUCAO DATE)
AS
SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS
DECLARE @NR_CPF INT 
--EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL
SELECT @NR_CPF = COUNT(CLI_CH_CPF)
FROM LOC_CLIENTE
WHERE CLI_CH_CPF = @CPF 
--COMPARANDO SE O TOTAL É IGUAL A ZERO (OU SEJA, SE A CPF EXISTE NO BD)
IF @NR_CPF = 0
BEGIN
  RAISERROR('Não é possível efetuar a alteração: O CPF informada não existe!',15,1)
  RETURN
END
--VERIFICANDO O FORMATO DA CPF
IF (@CPF NOT LIKE '[0-9][0-9][0-9][.][0-9][0-9][0-9][.][0-9][0-9][0-9][-][0-9][0-9]')
BEGIN
   RAISERROR('A CPF informada não corresponde ao padrão 999.999.999-99',15,1)
   RETURN
END
--COMPARANDO SE O TAMANHO DA STRING (APÓS REMOVER OS ESPAÇOS EM BRANCO) É MAIOR QUE 0
IF LEN(TRIM(@NOME))=0
BEGIN
   RAISERROR('O nome e a descrição do veículo são obrigatórios!',15,1)
   RETURN
END

IF @CODIGOVEICULO IS NOT NULL AND @LOCACAO IS NULL AND @DEVOLUCAO IS NULL
BEGIN
	RAISERROR('Se o cliente for vinculado a um carro a data de locação e data de devolução são obrigatória!',15,1)
	RETURN
END

UPDATE LOC_CLIENTE
SET CLI_CH_CPF = @CPF, 
    CLI_ST_NOME = @NOME, 
	CLI_IN_CODIGO_VEICULO = @CODIGOVEICULO, 
	CLI_DT_LOCACAO = @LOCACAO,
	CLI_DT_DEVOLUCAO = @DEVOLUCAO
WHERE
    CLI_CH_CPF = @CPF
RETURN 
GO
/* FIM DA STORED PROCEDURE DE ALTERAÇÃO */

EXEC SP_U_LOC_CLIENTE '999.178.999-99','RenaRFE L', 2, '2023-01-12', '2023-01-16';

/*
*
* PROCEDURE PARA EXCLUIR UM CLIENTE PELO CPF
*
*/
CREATE OR ALTER PROCEDURE SP_D_LOC_CLIENTE(
@CPF CHAR(14))
AS
SET NOCOUNT ON -- DESLIGA A MSG DE LINHAS AFETADAS
DECLARE @NR_CPF INT 
--EFETUANDO O SELECT E ATRIBUINDO O RESULTADO DO COUNT NA VARIÁVEL
SELECT @NR_CPF = COUNT(CLI_CH_CPF)
FROM LOC_CLIENTE
WHERE CLI_CH_CPF = @CPF
--COMPARANDO SE O TOTAL É IGUAL A ZERO (OU SEJA, SE O CPF EXISTE NO BD)
IF @NR_CPF = 0
BEGIN
  RAISERROR('Não é possível efetuar a exclusão: O cpf informadO não existe!',15,1)
  RETURN
END

DELETE 
FROM 
	LOC_CLIENTE
WHERE
    CLI_CH_CPF = @CPF
RETURN 
GO

EXEC SP_D_LOC_CLIENTE '999.178.999-99'

CREATE OR ALTER PROCEDURE SP_S_LOC_CLIENTE
( @FILTRO VARCHAR(100)='')
AS
IF (LEN(@FILTRO)=0)
BEGIN
SELECT
	CLI_IN_CODIGO AS 'Código',
	CLI_CH_CPF AS 'Cpf',
	CLI_ST_NOME AS 'Nome',
	CLI_IN_CODIGO_VEICULO AS 'Veiculo',
	CLI_DT_LOCACAO AS 'Data Locação',
	CLI_DT_DEVOLUCAO AS 'Data Devolução'
FROM
	LOC_CLIENTE
ORDER BY
	CLI_CH_CPF
RETURN
END
ELSE
BEGIN
SELECT
	CLI_IN_CODIGO AS 'Código',
	CLI_CH_CPF AS 'Cpf',
	CLI_ST_NOME AS 'Nome',
	CLI_IN_CODIGO_VEICULO AS 'Veiculo',
	CLI_DT_LOCACAO AS 'Data Locação',
	CLI_DT_DEVOLUCAO AS 'Data Devolução'

FROM
	LOC_CLIENTE
WHERE
	CLI_CH_CPF LIKE '%'+@FILTRO+'%' OR
	CLI_ST_NOME LIKE '%'+@FILTRO+'%' OR
	CLI_IN_CODIGO_VEICULO LIKE '%'+@FILTRO+'%'
ORDER BY
	CLI_CH_CPF
END
GO
/* FIM DA STORED PROCEDURE DE LISTAGEM */


EXEC SP_S_LOC_CLIENTE '440'

/*
Criando o usuário com limitações de acesso ao SGBD
O acesso do usuário será apenas de conectar no BD e executar as procedures.
Verifique em Propriedades da Conexão se o acesso é permitido via usuário SQL.
*/
USE MASTER
GO

--DROP LOGIN teste;
CREATE LOGIN teste WITH PASSWORD = '1234';
GO

GRANT CONNECT SQL TO teste;
GO

USE LOCADORA
GO

--DROP USER teste
CREATE USER teste FOR LOGIN teste;
GO

GRANT EXECUTE ON LOCADORA.dbo.SP_I_LOC_VEICULO TO teste;
GRANT EXECUTE ON LOCADORA.dbo.SP_U_LOC_VEICULO TO teste;
GRANT EXECUTE ON LOCADORA.dbo.SP_D_LOC_VEICULO TO teste;
GRANT EXECUTE ON LOCADORA.dbo.SP_S_LOC_VEICULO TO teste;

GRANT EXECUTE ON LOCADORA.dbo.SP_I_LOC_CLIENTE TO teste;
GRANT EXECUTE ON LOCADORA.dbo.SP_U_LOC_CLIENTE TO teste;
GRANT EXECUTE ON LOCADORA.dbo.SP_D_LOC_CLIENTE TO teste;
GRANT EXECUTE ON LOCADORA.dbo.SP_S_LOC_CLIENTE TO teste;